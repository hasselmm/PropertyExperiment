name: Build and Test using CMake

on:
  workflow_call:
    inputs:
      platform:
        type:        string
        required:    true

      compiler:
        type:        string
        required:    true

      qt_version:
        type:        string
        required:    true
        description: "For a list of available Qt versions see https://ddalcino.github.io/aqt-list-server/"

      msys2_system:
        type:        string
        required:    true

      homebrew_path:
        type:        string
        required:    true

      reporting:
        type:        boolean
        required:    false
        default:     false

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  status:
    runs-on: ubuntu-latest
    steps:
    - name: Show parameters
      run:  echo '${{ toJSON(inputs) }}'

  testing:
    if: ${{ (startsWith(inputs.platform, 'macos-')   && vars.MACOS_ENABLED   != '0')
         || (startsWith(inputs.platform, 'ubuntu-')  && vars.LINUX_ENABLED   != '0')
         || (startsWith(inputs.platform, 'windows-') && vars.WINDOWS_ENABLED != '0')
         }}

    runs-on: ${{ inputs.platform }}
    needs: status

    steps:
    - name: "Identify build variant"
      id:    variant-id
      shell: bash
      run: >-
        echo "value=${{
            format(inputs.msys2_system && 'Qt-{0}-{1}-{2}-{3}' || 'Qt-{0}-{1}-{2}',
                   inputs.qt_version, runner.os, inputs.compiler, inputs.msys2_system)
        }}" >> $GITHUB_OUTPUT

    - name: "Identify MSYS2 system"
      id:    msys2
      shell: bash
      run: |
        msys2='${{ inputs.msys2_system }}'

        if [ "${msys2}" = "mingw64" ]; then
            echo "arch=x86_64" >> $GITHUB_OUTPUT
        elif [ -n "${msys2}" ]; then
            echo "arch=${msys2:0:-2}-x86_64" >> $GITHUB_OUTPUT
        else
            echo "arch=" >> $GITHUB_OUTPUT
        fi

        cat $GITHUB_OUTPUT

    - name: "Checkout project"
      uses: actions/checkout@v3

    - name: "Install Qt using aqtinstall"
      uses: jurplel/install-qt-action@v3.3.0
      if:   ${{!inputs.msys2_system}}
      with:
        version: ${{inputs.qt_version}}
        tools: tools_ninja
        cache: true

    - name: "Install Qt using MSYS2"
      uses: msys2/setup-msys2@v2
      if:   ${{inputs.msys2_system}}
      with:
        update: true
        location: D:\
        install: >-
          mingw-w64-${{ steps.msys2.outputs.arch }}-clang
          mingw-w64-${{ steps.msys2.outputs.arch }}-cmake
          mingw-w64-${{ steps.msys2.outputs.arch }}-libc++
          mingw-w64-${{ steps.msys2.outputs.arch }}-libunwind
          mingw-w64-${{ steps.msys2.outputs.arch }}-ninja
          mingw-w64-${{ steps.msys2.outputs.arch }}-qt6-base-debug
          mingw-w64-${{ steps.msys2.outputs.arch }}-qt6-base

    - name: Install libc++
      if:  ${{ inputs.platform == 'ubuntu-latest'
            && inputs.compiler == 'clang++-15' }}
      shell: bash
      run:   sudo apt install libc++-15-dev libc++abi-15-dev

    - name: "Setup environment"
      id:    buildenv
      shell: bash
      run: |
        add_path() {
          if [ -n "$1" ]; then
            echo "${2:-$1}" >> $GITHUB_PATH
          fi
        }

        add_path "${{inputs.homebrew_path}}"
        add_path "${{inputs.msys2_system}}" "D:\MSYS64\${{inputs.msys2_system}}\bin"
        add_path "${IQTA_TOOLS}" "${IQTA_TOOLS}/Ninja"

        echo GITHUB_PATH
        cat $GITHUB_PATH

        if [ -n "${{inputs.msys2_system}}" ]; then
          echo "MSYSTEM=${{inputs.msys2_system}}" >> $GITHUB_ENV

          echo GITHUB_ENV
          cat $GITHUB_ENV
        fi

        echo "build-output-dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

        echo GITHUB_OUTPUT
        cat $GITHUB_OUTPUT

    - name: Check tools
      if:   ${{inputs.compiler != 'cl'}}
      run: |
        echo "PATH is: '${{inputs.patform == 'windows-latest' && '$env:PATH' || '$PATH'}}'"

        echo "Ninja:"
        ninja --version

        echo "CMake:"
        cmake --version

        echo "Compiler:"
        ${{inputs.compiler}} --version

    - name: Configure using CMake
      run: >
        cmake
        --loglevel=VERBOSE
        ${{inputs.compiler != 'cl' && '-G "Ninja Multi-Config"' || ''}}
        -S "${{github.workspace}}"
        -B "${{steps.buildenv.outputs.build-output-dir}}"
        -D "CMAKE_CONFIGURATION_TYPES:LIST=Debug;MinSizeRel;RelWithDebInfo"
        -D "CMAKE_CXX_COMPILER:STRING=${{inputs.compiler}}"
        -D "CMAKE_CXX_COMPILER_WORKS:BOOL=YES"
        -D "GENERATE_TEST_REPORTS:BOOL=YES"
        -D "VARIANT_ID:STRING=${{steps.variant-id.outputs.value}}"


    - name: Build Debug
      if:   ${{!inputs.msys2_system}}
      run: >
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config Debug --target PropertyExperiment

    - name: Build MinSizeRel
      if:   ${{!inputs.msys2_system }}
      run: >
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config MinSizeRel

    - name: Build RelWithDebInfo
      if:   ${{!inputs.msys2_system}}
      run: >
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config RelWithDebInfo --target PropertyExperiment


    - name:  Build Debug using MSYS2
      if:    ${{inputs.msys2_system}}
      shell: msys2 {0}
      run: >
        PATH=/${{inputs.msys2_system}}/bin
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config Debug --target PropertyExperiment

    - name:  Build MinSizeRel using MSYS2
      if:    ${{inputs.msys2_system}}
      shell: msys2 {0}
      run: >
        PATH=/${{inputs.msys2_system}}/bin
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config MinSizeRel

    - name:  Build RelWithDebInfo using MSYS2
      if:    ${{inputs.msys2_system}}
      shell: msys2 {0}
      run: >
        PATH=/${{inputs.msys2_system}}/bin
        cmake
        --build "${{steps.buildenv.outputs.build-output-dir}}"
        --config RelWithDebInfo --target PropertyExperiment


    - name: Test Debug
      working-directory: ${{steps.buildenv.outputs.build-output-dir}}
      run: ctest --rerun-failed --output-on-failure --build-config Debug

    - name: Test MinSizeRel
      working-directory: ${{steps.buildenv.outputs.build-output-dir}}
      run: ctest --rerun-failed --output-on-failure --build-config MinSizeRel

    - name: Test RelWithDebInfo
      working-directory: ${{steps.buildenv.outputs.build-output-dir}}
      run: ctest --rerun-failed --output-on-failure --build-config RelWithDebInfo

    - name: Amend test reports with additional information
      working-directory: ${{steps.buildenv.outputs.build-output-dir}}
      shell: bash
      run: |
        for config in $(sed -ne 'y/;/ /;s/^CMAKE_CONFIGURATION_TYPES:.*=//p' CMakeCache.txt)
        do
            report="test-report-${{steps.variant-id.outputs.value}}-${config}.xml"

            echo "<Environment>"                                            >> $report
            echo "    <OperatingSystem>${{ runner.os }}</OperatingSystem>"  >> $report
            echo "    <CMakeConfig>${config}</CMakeConfig>"                 >> $report
            echo "    <Compiler>$(< compiler-info.txt)</Compiler>"          >> $report
            echo "</Environment>"                                           >> $report
        done

    - name: List build folder
      working-directory: ${{steps.buildenv.outputs.build-output-dir}}
      shell: bash
      run: ls -lR

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if:   always()
      with:
        name: "test-reports-${{steps.variant-id.outputs.value}}"
        path: "${{steps.buildenv.outputs.build-output-dir}}/test-report-*.xml"

    - name: Archive build output on failure
      uses: actions/upload-artifact@v4
      if:   failure()
      with:
        name: "build-output-${{steps.variant-id.outputs.value}}"
        path: "${{steps.buildenv.outputs.build-output-dir}}"

    - name: Archive reporting tool
      uses: actions/upload-artifact@v4
      if:   inputs.reporting
      with:
        name: "reporting-tool-${{steps.variant-id.outputs.value}}"
        path: "${{steps.buildenv.outputs.build-output-dir}}/reporting/MinSizeRel"
